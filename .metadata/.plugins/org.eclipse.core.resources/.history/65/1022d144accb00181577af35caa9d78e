import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;

public class OperationsOnList {

	public static void main(String[] args) {

		List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5, 9, 8, 12);
		System.out.println("Print all values in a list:");
		System.out.println(printAll(numbers));
		System.out.println("Print only even numbers: ");
		printEven(numbers);
		System.out.println("Print all values of the list multiplied by 10: ");
		printTens(numbers);
		System.out.println("Print highest value in the list: ");
		printHighest(numbers);
		System.out.println("Print Highest by external function: ");
		printHighestByLib(numbers);
		System.out.println("Print Lowest value in the list: ");
		printLowest(numbers);
		System.out.println("Print Squares: ");
		printSquares(numbers);
		System.out.println("Add only unique values to list: ");
		sortList(numbers);

	}

	// TASK 1
	public static List printAll(List initial) {
		return initial;
	}

	// TASK 2

	public static void printEven(List<Integer> initial) {
		for (int i = 0; i < initial.size(); i++) {
			if (initial.get(i) % 2 == 0) {
				System.out.print(initial.get(i));
			}
		}
		System.out.println("");
	}

	// TASK 3

	public static void printTens(List<Integer> initial) {
		for (Integer value : initial) {
			int finalValue = value * 10;
			System.out.println(finalValue);
		}

	}

	// TASk 4

	public static void printHighest(List<Integer> initial) {
		
		if (initial.size() > 0) {
			int highest = initial.get(0);
			int highestIndex = 0;

			for (int i = 1; i < initial.size(); i++) {
				int curValue = initial.get(i);
				if (curValue > highest) {
					highest = curValue;
					highestIndex = i;
				}
			}

			System.out.println(highest);
		}
	}

	// Task 4 by MAX function

	public static void printHighestByLib(List<Integer> initial) {
		Integer maxElement = Collections.max(initial);
		System.out.println(maxElement);
	}

	// Task 5

	public static void printLowest(List<Integer> initial) {
		if (initial.size() > 0) {
			int lowest = initial.get(0);
			int lowestIndex = 0;

			for (int i = 1; i < initial.size(); i++) {
				int curValue = initial.get(i);
				if (curValue < lowest) {
					lowest = curValue;
					lowestIndex = i;
				}
			}

			System.out.println(lowest);
		}
	}
	
	
	// Task 6
	
	public static void printSquares(List<Integer> initial) {
		
		for(int value:initial) {
			int finalValue = value * value;
			System.out.println(finalValue);
		}
			
	}
	
	// Task 7
	
	public static List addUniqueOnly(List<Integer> initial) {
		List <Integer> midList = new ArrayList<>();
		List <Integer> finalList = new ArrayList<>();
		for(int value: initial) {
			int finalValue = value * value;
			midList.add(finalValue);
		}
		
		Set<Integer> hashsetList = new HashSet<Integer>(finalList);
        System.out.printf("\nUnique values using HashSet: %s%n", hashsetList);
		return finalList;
	}
	
}
